{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js","node_modules/@swc/helpers/esm/_class_call_check.js","node_modules/@swc/helpers/esm/_create_class.js","node_modules/@swc/helpers/esm/_to_consumable_array.js","node_modules/@swc/helpers/esm/_array_without_holes.js","node_modules/@swc/helpers/esm/_array_like_to_array.js","node_modules/@swc/helpers/esm/_iterable_to_array.js","node_modules/@swc/helpers/esm/_non_iterable_spread.js","node_modules/@swc/helpers/esm/_unsupported_iterable_to_array.js"],"sourcesContent":["(function () {\n/* eslint-disable no-shadow */ /* eslint-disable no-console */ function $8713978b2328d32b$export$71511d61b312f219(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\n\n\nfunction $4fc75ccb937ab1df$var$_defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction $4fc75ccb937ab1df$export$71511d61b312f219(Constructor, protoProps, staticProps) {\n    if (protoProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor, staticProps);\n    return Constructor;\n}\n\n\nfunction $c3b10a83b523f372$export$71511d61b312f219(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\n\n\nfunction $c50969dc1df61e8b$export$71511d61b312f219(arr) {\n    if (Array.isArray(arr)) return (0, $c3b10a83b523f372$export$71511d61b312f219)(arr);\n}\n\n\nfunction $09c9f293d010c0e1$export$71511d61b312f219(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\n\n\nfunction $38c2d4931cb7a7c4$export$71511d61b312f219() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\n\n\nfunction $d4f69c5c6c4654b1$export$71511d61b312f219(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return (0, $c3b10a83b523f372$export$71511d61b312f219)(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return (0, $c3b10a83b523f372$export$71511d61b312f219)(o, minLen);\n}\n\n\nfunction $227c6742e0ff6f82$export$71511d61b312f219(arr) {\n    return (0, $c50969dc1df61e8b$export$71511d61b312f219)(arr) || (0, $09c9f293d010c0e1$export$71511d61b312f219)(arr) || (0, $d4f69c5c6c4654b1$export$71511d61b312f219)(arr) || (0, $38c2d4931cb7a7c4$export$71511d61b312f219)();\n}\n\n\n\"use strict\";\nvar $3d28d7f1aac198f5$var$GRID_SIZE = 4;\nvar $3d28d7f1aac198f5$export$2e2bcd8739ae039 = /*#__PURE__*/ function() {\n    function Game() {\n        (0, $8713978b2328d32b$export$71511d61b312f219)(this, Game);\n        this.board = this.getState();\n        this.score = 0;\n        this.gameActive = false;\n        this.cells = document.querySelectorAll(\".field-cell\");\n        this.messageWin = document.querySelector(\".message-win\");\n        this.messageLose = document.querySelector(\".message-lose\");\n        this.assignDataAttributes();\n    }\n    (0, $4fc75ccb937ab1df$export$71511d61b312f219)(Game, [\n        {\n            key: \"assignDataAttributes\",\n            value: function assignDataAttributes() {\n                this.cells.forEach(function(cell, index) {\n                    var row = Math.floor(index / $3d28d7f1aac198f5$var$GRID_SIZE);\n                    var col = index % $3d28d7f1aac198f5$var$GRID_SIZE;\n                    cell.dataset.row = row;\n                    cell.dataset.col = col;\n                });\n            }\n        },\n        {\n            key: \"moveUp\",\n            value: function moveUp() {\n                if (!this.gameActive) return;\n                var changed = false;\n                for(var col = 0; col < $3d28d7f1aac198f5$var$GRID_SIZE; col++)if (this.moveColumnUp(col)) changed = true;\n                if (changed) {\n                    this.getRandomTile();\n                    this.addCell();\n                }\n                this.checkGameStatus();\n            }\n        },\n        {\n            key: \"moveDown\",\n            value: function moveDown() {\n                if (!this.gameActive) return;\n                var changed = false;\n                for(var col = 0; col < $3d28d7f1aac198f5$var$GRID_SIZE; col++)if (this.moveColumnDown(col)) changed = true;\n                if (changed) {\n                    this.getRandomTile();\n                    this.addCell();\n                }\n                this.checkGameStatus();\n            }\n        },\n        {\n            key: \"moveLeft\",\n            value: function moveLeft() {\n                if (!this.gameActive) return;\n                var changed = false;\n                for(var row = 0; row < $3d28d7f1aac198f5$var$GRID_SIZE; row++)if (this.moveColumnLeft(row)) changed = true;\n                if (changed) {\n                    this.getRandomTile();\n                    this.addCell();\n                }\n                this.checkGameStatus();\n            }\n        },\n        {\n            key: \"moveRight\",\n            value: function moveRight() {\n                if (!this.gameActive) return;\n                var changed = false;\n                for(var row = 0; row < $3d28d7f1aac198f5$var$GRID_SIZE; row++)if (this.moveColumnRight(row)) changed = true;\n                if (changed) {\n                    this.getRandomTile();\n                    this.addCell();\n                }\n                this.checkGameStatus();\n            }\n        },\n        {\n            key: \"getScore\",\n            value: function getScore() {\n                return this.board.flat().reduce(function(acc, value) {\n                    return acc + value;\n                }, 0);\n            }\n        },\n        {\n            key: \"getState\",\n            value: function getState() {\n                return (0, $227c6742e0ff6f82$export$71511d61b312f219)(Array($3d28d7f1aac198f5$var$GRID_SIZE)).map(function() {\n                    return Array($3d28d7f1aac198f5$var$GRID_SIZE).fill(0);\n                });\n            }\n        },\n        {\n            key: \"getRandomTile\",\n            value: function getRandomTile() {\n                var emptyTiles = [];\n                for(var row = 0; row < $3d28d7f1aac198f5$var$GRID_SIZE; row++){\n                    for(var col = 0; col < $3d28d7f1aac198f5$var$GRID_SIZE; col++)if (this.board[row][col] === 0) emptyTiles.push({\n                        row: row,\n                        col: col\n                    });\n                }\n                if (emptyTiles.length) {\n                    var _emptyTiles_Math_floor = emptyTiles[Math.floor(Math.random() * emptyTiles.length)], row1 = _emptyTiles_Math_floor.row, col1 = _emptyTiles_Math_floor.col;\n                    this.board[row1][col1] = Math.random() < 0.9 ? 2 : 4;\n                    this.animateNewTile(row1, col1);\n                    return {\n                        row: row1,\n                        col: col1,\n                        value: this.board[row1][col1]\n                    };\n                }\n                return null;\n            }\n        },\n        {\n            key: \"checkWin\",\n            value: function checkWin() {\n                return this.board.flat().includes(2048);\n            }\n        },\n        {\n            key: \"checkLose\",\n            value: function checkLose() {\n                for(var row = 0; row < $3d28d7f1aac198f5$var$GRID_SIZE; row++)for(var col = 0; col < $3d28d7f1aac198f5$var$GRID_SIZE; col++){\n                    if (this.board[row][col] === 0) return false;\n                    var checkCol = col < $3d28d7f1aac198f5$var$GRID_SIZE - 1 && this.board[row][col] === this.board[row][col + 1];\n                    var checkRow = row < $3d28d7f1aac198f5$var$GRID_SIZE - 1 && this.board[row][col] === this.board[row + 1][col];\n                    if (checkCol || checkRow) return false;\n                }\n                return true;\n            }\n        },\n        {\n            key: \"getStatus\",\n            value: function getStatus() {\n                if (this.checkWin()) return \"win\";\n                if (this.checkLose()) return \"lose\";\n                return \"playing\";\n            }\n        },\n        {\n            key: \"checkGameStatus\",\n            value: function checkGameStatus() {\n                var gameStatus = this.getStatus();\n                if (gameStatus === \"win\") this.messageWin.classList.remove(\"hidden\");\n                else if (gameStatus === \"lose\") this.messageLose.classList.remove(\"hidden\");\n            }\n        },\n        {\n            key: \"addCell\",\n            value: function addCell() {\n                var _this = this;\n                this.cells.forEach(function(cell, index) {\n                    var row = Math.floor(index / $3d28d7f1aac198f5$var$GRID_SIZE);\n                    var col = index % $3d28d7f1aac198f5$var$GRID_SIZE;\n                    var value = _this.board[row][col];\n                    var hasValue = value ? \" field-cell--\".concat(value) : \"\";\n                    cell.className = \"field-cell\" + hasValue;\n                    cell.textContent = value || \"\";\n                    _this.animateAppear(row, col);\n                });\n            }\n        },\n        {\n            key: \"deleteCell\",\n            value: function deleteCell() {\n                this.cells.forEach(function(cell) {\n                    cell.className = \"field-cell\";\n                    cell.textContent = \"\";\n                });\n            }\n        },\n        {\n            key: \"start\",\n            value: function start(element) {\n                var _this = this;\n                this.gameActive = true;\n                this.score = 0;\n                element.classList.replace(\"start\", \"restart\");\n                element.textContent = \"Restart\";\n                setTimeout(function() {\n                    _this.getRandomTile();\n                    _this.getRandomTile();\n                    _this.addCell();\n                    _this.assignDataAttributes();\n                }, 100);\n            }\n        },\n        {\n            key: \"restart\",\n            value: function restart(element) {\n                this.gameActive = false;\n                this.score = 0;\n                var hasHiddenLose = this.messageLose.classList.contains(\"hidden\");\n                var hasHiddenWin = this.messageWin.classList.contains(\"hidden\");\n                if (!hasHiddenLose) this.messageLose.classList.add(\"hidden\");\n                if (!hasHiddenWin) this.messageWin.classList.add(\"hidden\");\n                element.classList.replace(\"restart\", \"start\");\n                element.textContent = \"Start\";\n                this.board = this.getState();\n                this.deleteCell();\n                this.assignDataAttributes();\n            }\n        },\n        {\n            key: \"moveColumnUp\",\n            value: function moveColumnUp(col) {\n                var changed = false;\n                var compressedColumn = this.board.map(function(row) {\n                    return row[col];\n                }).filter(function(value) {\n                    return value !== 0;\n                });\n                for(var i = 0; i < compressedColumn.length - 1; i++)if (compressedColumn[i] === compressedColumn[i + 1]) {\n                    compressedColumn[i] *= 2;\n                    compressedColumn.splice(i + 1, 1);\n                    this.score += compressedColumn[i];\n                    this.animateMerge(i, col);\n                    changed = true;\n                }\n                while(compressedColumn.length < $3d28d7f1aac198f5$var$GRID_SIZE)compressedColumn.push(0);\n                for(var row = 0; row < $3d28d7f1aac198f5$var$GRID_SIZE; row++){\n                    if (this.board[row][col] !== compressedColumn[row]) changed = true;\n                    this.board[row][col] = compressedColumn[row];\n                    this.animateMove(row, col);\n                }\n                return changed;\n            }\n        },\n        {\n            key: \"moveColumnDown\",\n            value: function moveColumnDown(col) {\n                var changed = false;\n                var compressedColumn = this.board.map(function(row) {\n                    return row[col];\n                }).filter(function(value) {\n                    return value !== 0;\n                });\n                for(var i = compressedColumn.length - 1; i > 0; i--)if (compressedColumn[i] === compressedColumn[i - 1]) {\n                    compressedColumn[i] *= 2;\n                    compressedColumn.splice(i - 1, 1);\n                    this.score += compressedColumn[i];\n                    this.animateMerge(i, col);\n                    changed = true;\n                }\n                while(compressedColumn.length < $3d28d7f1aac198f5$var$GRID_SIZE)compressedColumn.unshift(0);\n                for(var row = 0; row < $3d28d7f1aac198f5$var$GRID_SIZE; row++){\n                    if (this.board[row][col] !== compressedColumn[row]) changed = true;\n                    this.board[row][col] = compressedColumn[row];\n                    this.animateMove(row, col);\n                }\n                return changed;\n            }\n        },\n        {\n            key: \"moveColumnLeft\",\n            value: function moveColumnLeft(row) {\n                var changed = false;\n                var compressedRow = this.board[row].filter(function(value) {\n                    return value !== 0;\n                });\n                for(var i = 0; i < compressedRow.length - 1; i++)if (compressedRow[i] === compressedRow[i + 1]) {\n                    compressedRow[i] *= 2;\n                    compressedRow.splice(i + 1, 1);\n                    this.score += compressedRow[i];\n                    this.animateMerge(row, i);\n                    changed = true;\n                }\n                while(compressedRow.length < $3d28d7f1aac198f5$var$GRID_SIZE)compressedRow.push(0);\n                if (this.board[row].some(function(value, index) {\n                    return value !== compressedRow[index];\n                })) changed = true;\n                this.board[row] = compressedRow;\n                for(var col = 0; col < $3d28d7f1aac198f5$var$GRID_SIZE; col++)this.animateMove(row, col);\n                return changed;\n            }\n        },\n        {\n            key: \"moveColumnRight\",\n            value: function moveColumnRight(row) {\n                var changed = false;\n                var compressedRow = this.board[row].filter(function(value) {\n                    return value !== 0;\n                });\n                for(var i = compressedRow.length - 1; i > 0; i--)if (compressedRow[i] === compressedRow[i - 1]) {\n                    compressedRow[i] *= 2;\n                    compressedRow.splice(i - 1, 1);\n                    this.score += compressedRow[i];\n                    this.animateMerge(row, i);\n                    changed = true;\n                }\n                while(compressedRow.length < $3d28d7f1aac198f5$var$GRID_SIZE)compressedRow.unshift(0);\n                if (this.board[row].some(function(value, index) {\n                    return value !== compressedRow[index];\n                })) changed = true;\n                this.board[row] = compressedRow;\n                for(var col = 0; col < $3d28d7f1aac198f5$var$GRID_SIZE; col++)this.animateMove(row, col);\n                return changed;\n            }\n        },\n        {\n            key: \"animateNewTile\",\n            value: function animateNewTile(row, col) {\n                var cell = document.querySelector('.field-cell[data-row=\"'.concat(row, '\"][data-col=\"').concat(col, '\"]'));\n                if (cell) {\n                    cell.classList.add(\"field-cell--new\");\n                    setTimeout(function() {\n                        cell.classList.remove(\"field-cell--new\");\n                    }, 300);\n                }\n            }\n        },\n        {\n            key: \"animateAppear\",\n            value: function animateAppear(row, col) {\n                var cell = document.querySelector('.field-cell[data-row=\"'.concat(row, '\"][data-col=\"').concat(col, '\"]'));\n                if (cell) {\n                    cell.classList.add(\"field-cell--appear\");\n                    setTimeout(function() {\n                        cell.classList.remove(\"field-cell--appear\");\n                    }, 200);\n                }\n            }\n        },\n        {\n            key: \"animateMerge\",\n            value: function animateMerge(row, col) {\n                var cell = document.querySelector('.field-cell[data-row=\"'.concat(row, '\"][data-col=\"').concat(col, '\"]'));\n                if (cell) {\n                    cell.classList.add(\"field-cell--merge\");\n                    setTimeout(function() {\n                        cell.classList.remove(\"field-cell--merge\");\n                    }, 300);\n                }\n            }\n        },\n        {\n            key: \"animateMove\",\n            value: function animateMove(row, col) {\n                var cell = document.querySelector('.field-cell[data-row=\"'.concat(row, '\"][data-col=\"').concat(col, '\"]'));\n                if (cell) {\n                    cell.classList.add(\"field-cell--move\");\n                    setTimeout(function() {\n                        cell.classList.remove(\"field-cell--move\");\n                    }, 300);\n                }\n            }\n        }\n    ]);\n    return Game;\n}();\n\n\n\"use strict\";\ndocument.addEventListener(\"DOMContentLoaded\", function() {\n    // #region constants\n    var MESSAGE_RESTART = \"Are you sure you want to start a new game? All progress will be lost.\";\n    var game = new (0, $3d28d7f1aac198f5$export$2e2bcd8739ae039)();\n    var gameStart = document.querySelector(\".button\");\n    var score = document.querySelector(\".game-score\");\n    var messageStart = document.querySelector(\".message-start\");\n    // #endregion\n    // #region func\n    var checkStatus = function() {\n        var hasStart = gameStart.classList.contains(\"start\");\n        if (hasStart) {\n            game.start(gameStart);\n            messageStart.classList.add(\"hidden\");\n        } else {\n            if (confirm(MESSAGE_RESTART)) {\n                game.restart(gameStart);\n                game.start(gameStart);\n            } else return;\n        }\n        setUpScore();\n        setUpInputOnce();\n    };\n    var setUpInputOnce = function() {\n        return window.addEventListener(\"keydown\", handleInput, {\n            once: true\n        });\n    };\n    var setUpScore = function() {\n        score.textContent = game.getScore();\n    };\n    var handleInput = function(event) {\n        switch(event.key){\n            case \"ArrowUp\":\n                game.moveUp();\n                break;\n            case \"ArrowDown\":\n                game.moveDown();\n                break;\n            case \"ArrowLeft\":\n                game.moveLeft();\n                break;\n            case \"ArrowRight\":\n                game.moveRight();\n                break;\n            default:\n                setUpInputOnce();\n                return;\n        }\n        setUpScore();\n        setUpInputOnce();\n    };\n    // #endregion\n    // #region addEventListeners and initial\n    setUpInputOnce();\n    gameStart.addEventListener(\"click\", checkStatus);\n// #endregion\n});\n\n})();\n//# sourceMappingURL=index.61c2c5d8.js.map\n","/* eslint-disable no-shadow */\n'use strict';\n\nimport Game from '../modules/Game.class.js';\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  // #region constants\n\n  const MESSAGE_RESTART =\n    'Are you sure you want to start a new game? All progress will be lost.';\n\n  const game = new Game();\n  const gameStart = document.querySelector('.button');\n  const score = document.querySelector('.game-score');\n  const messageStart = document.querySelector('.message-start');\n\n  // #endregion\n\n  // #region func\n\n  const checkStatus = () => {\n    const hasStart = gameStart.classList.contains('start');\n\n    if (hasStart) {\n      game.start(gameStart);\n      messageStart.classList.add('hidden');\n    } else {\n      if (confirm(MESSAGE_RESTART)) {\n        game.restart(gameStart);\n        game.start(gameStart);\n      } else {\n        return;\n      }\n    }\n\n    setUpScore();\n    setUpInputOnce();\n  };\n\n  const setUpInputOnce = () =>\n    window.addEventListener('keydown', handleInput, { once: true });\n\n  const setUpScore = () => {\n    score.textContent = game.getScore();\n  };\n\n  const handleInput = (event) => {\n    switch (event.key) {\n      case 'ArrowUp':\n        game.moveUp();\n        break;\n      case 'ArrowDown':\n        game.moveDown();\n        break;\n      case 'ArrowLeft':\n        game.moveLeft();\n        break;\n      case 'ArrowRight':\n        game.moveRight();\n        break;\n      default:\n        setUpInputOnce();\n\n        return;\n    }\n\n    setUpScore();\n    setUpInputOnce();\n  };\n\n  // #endregion\n\n  // #region addEventListeners and initial\n  setUpInputOnce();\n\n  gameStart.addEventListener('click', checkStatus);\n  // #endregion\n});\n","/* eslint-disable no-console */\n'use strict';\n\nconst GRID_SIZE = 4;\n\nexport default class Game {\n  constructor() {\n    this.board = this.getState();\n\n    this.score = 0;\n    this.gameActive = false;\n    this.cells = document.querySelectorAll('.field-cell');\n\n    this.messageWin = document.querySelector('.message-win');\n    this.messageLose = document.querySelector('.message-lose');\n\n    this.assignDataAttributes();\n  }\n\n  assignDataAttributes() {\n    this.cells.forEach((cell, index) => {\n      const row = Math.floor(index / GRID_SIZE);\n      const col = index % GRID_SIZE;\n\n      cell.dataset.row = row;\n      cell.dataset.col = col;\n    });\n  }\n\n  moveUp() {\n    if (!this.gameActive) {\n      return;\n    }\n\n    let changed = false;\n\n    for (let col = 0; col < GRID_SIZE; col++) {\n      if (this.moveColumnUp(col)) {\n        changed = true;\n      }\n    }\n\n    if (changed) {\n      this.getRandomTile();\n      this.addCell();\n    }\n\n    this.checkGameStatus();\n  }\n\n  moveDown() {\n    if (!this.gameActive) {\n      return;\n    }\n\n    let changed = false;\n\n    for (let col = 0; col < GRID_SIZE; col++) {\n      if (this.moveColumnDown(col)) {\n        changed = true;\n      }\n    }\n\n    if (changed) {\n      this.getRandomTile();\n      this.addCell();\n    }\n\n    this.checkGameStatus();\n  }\n\n  moveLeft() {\n    if (!this.gameActive) {\n      return;\n    }\n\n    let changed = false;\n\n    for (let row = 0; row < GRID_SIZE; row++) {\n      if (this.moveColumnLeft(row)) {\n        changed = true;\n      }\n    }\n\n    if (changed) {\n      this.getRandomTile();\n      this.addCell();\n    }\n\n    this.checkGameStatus();\n  }\n\n  moveRight() {\n    if (!this.gameActive) {\n      return;\n    }\n\n    let changed = false;\n\n    for (let row = 0; row < GRID_SIZE; row++) {\n      if (this.moveColumnRight(row)) {\n        changed = true;\n      }\n    }\n\n    if (changed) {\n      this.getRandomTile();\n      this.addCell();\n    }\n\n    this.checkGameStatus();\n  }\n\n  getScore() {\n    return this.board.flat().reduce((acc, value) => acc + value, 0);\n  }\n\n  getState() {\n    return [...Array(GRID_SIZE)].map(() => Array(GRID_SIZE).fill(0));\n  }\n\n  getRandomTile() {\n    const emptyTiles = [];\n\n    for (let row = 0; row < GRID_SIZE; row++) {\n      for (let col = 0; col < GRID_SIZE; col++) {\n        if (this.board[row][col] === 0) {\n          emptyTiles.push({ row, col });\n        }\n      }\n    }\n\n    if (emptyTiles.length) {\n      const { row, col } =\n        emptyTiles[Math.floor(Math.random() * emptyTiles.length)];\n\n      this.board[row][col] = Math.random() < 0.9 ? 2 : 4;\n      this.animateNewTile(row, col);\n\n      return { row, col, value: this.board[row][col] };\n    }\n\n    return null;\n  }\n\n  checkWin() {\n    return this.board.flat().includes(2048);\n  }\n\n  checkLose() {\n    for (let row = 0; row < GRID_SIZE; row++) {\n      for (let col = 0; col < GRID_SIZE; col++) {\n        if (this.board[row][col] === 0) {\n          return false;\n        }\n\n        const checkCol =\n          col < GRID_SIZE - 1 &&\n          this.board[row][col] === this.board[row][col + 1];\n\n        const checkRow =\n          row < GRID_SIZE - 1 &&\n          this.board[row][col] === this.board[row + 1][col];\n\n        if (checkCol || checkRow) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  getStatus() {\n    if (this.checkWin()) {\n      return 'win';\n    }\n\n    if (this.checkLose()) {\n      return 'lose';\n    }\n\n    return `playing`;\n  }\n\n  checkGameStatus() {\n    const gameStatus = this.getStatus();\n\n    if (gameStatus === 'win') {\n      this.messageWin.classList.remove('hidden');\n    } else if (gameStatus === 'lose') {\n      this.messageLose.classList.remove('hidden');\n    }\n  }\n\n  addCell() {\n    this.cells.forEach((cell, index) => {\n      const row = Math.floor(index / GRID_SIZE);\n      const col = index % GRID_SIZE;\n      const value = this.board[row][col];\n      const hasValue = value ? ` field-cell--${value}` : '';\n\n      cell.className = 'field-cell' + hasValue;\n      cell.textContent = value || '';\n      this.animateAppear(row, col);\n    });\n  }\n\n  deleteCell() {\n    this.cells.forEach((cell) => {\n      cell.className = 'field-cell';\n      cell.textContent = '';\n    });\n  }\n\n  start(element) {\n    this.gameActive = true;\n    this.score = 0;\n\n    element.classList.replace('start', 'restart');\n    element.textContent = 'Restart';\n\n    setTimeout(() => {\n      this.getRandomTile();\n      this.getRandomTile();\n      this.addCell();\n      this.assignDataAttributes();\n    }, 100);\n  }\n\n  restart(element) {\n    this.gameActive = false;\n    this.score = 0;\n\n    const hasHiddenLose = this.messageLose.classList.contains('hidden');\n    const hasHiddenWin = this.messageWin.classList.contains('hidden');\n\n    if (!hasHiddenLose) {\n      this.messageLose.classList.add('hidden');\n    }\n\n    if (!hasHiddenWin) {\n      this.messageWin.classList.add('hidden');\n    }\n\n    element.classList.replace('restart', 'start');\n    element.textContent = 'Start';\n\n    this.board = this.getState();\n    this.deleteCell();\n    this.assignDataAttributes();\n  }\n\n  moveColumnUp(col) {\n    let changed = false;\n    const compressedColumn = this.board\n      .map((row) => row[col])\n      .filter((value) => value !== 0);\n\n    for (let i = 0; i < compressedColumn.length - 1; i++) {\n      if (compressedColumn[i] === compressedColumn[i + 1]) {\n        compressedColumn[i] *= 2;\n        compressedColumn.splice(i + 1, 1);\n        this.score += compressedColumn[i];\n        this.animateMerge(i, col);\n        changed = true;\n      }\n    }\n\n    while (compressedColumn.length < GRID_SIZE) {\n      compressedColumn.push(0);\n    }\n\n    for (let row = 0; row < GRID_SIZE; row++) {\n      if (this.board[row][col] !== compressedColumn[row]) {\n        changed = true;\n      }\n      this.board[row][col] = compressedColumn[row];\n      this.animateMove(row, col);\n    }\n\n    return changed;\n  }\n\n  moveColumnDown(col) {\n    let changed = false;\n    const compressedColumn = this.board\n      .map((row) => row[col])\n      .filter((value) => value !== 0);\n\n    for (let i = compressedColumn.length - 1; i > 0; i--) {\n      if (compressedColumn[i] === compressedColumn[i - 1]) {\n        compressedColumn[i] *= 2;\n        compressedColumn.splice(i - 1, 1);\n        this.score += compressedColumn[i];\n        this.animateMerge(i, col);\n        changed = true;\n      }\n    }\n\n    while (compressedColumn.length < GRID_SIZE) {\n      compressedColumn.unshift(0);\n    }\n\n    for (let row = 0; row < GRID_SIZE; row++) {\n      if (this.board[row][col] !== compressedColumn[row]) {\n        changed = true;\n      }\n      this.board[row][col] = compressedColumn[row];\n      this.animateMove(row, col);\n    }\n\n    return changed;\n  }\n\n  moveColumnLeft(row) {\n    let changed = false;\n    const compressedRow = this.board[row].filter((value) => value !== 0);\n\n    for (let i = 0; i < compressedRow.length - 1; i++) {\n      if (compressedRow[i] === compressedRow[i + 1]) {\n        compressedRow[i] *= 2;\n        compressedRow.splice(i + 1, 1);\n        this.score += compressedRow[i];\n        this.animateMerge(row, i);\n        changed = true;\n      }\n    }\n\n    while (compressedRow.length < GRID_SIZE) {\n      compressedRow.push(0);\n    }\n\n    if (\n      this.board[row].some((value, index) => value !== compressedRow[index])\n    ) {\n      changed = true;\n    }\n\n    this.board[row] = compressedRow;\n\n    for (let col = 0; col < GRID_SIZE; col++) {\n      this.animateMove(row, col);\n    }\n\n    return changed;\n  }\n\n  moveColumnRight(row) {\n    let changed = false;\n    const compressedRow = this.board[row].filter((value) => value !== 0);\n\n    for (let i = compressedRow.length - 1; i > 0; i--) {\n      if (compressedRow[i] === compressedRow[i - 1]) {\n        compressedRow[i] *= 2;\n        compressedRow.splice(i - 1, 1);\n        this.score += compressedRow[i];\n        this.animateMerge(row, i);\n        changed = true;\n      }\n    }\n\n    while (compressedRow.length < GRID_SIZE) {\n      compressedRow.unshift(0);\n    }\n\n    if (\n      this.board[row].some((value, index) => value !== compressedRow[index])\n    ) {\n      changed = true;\n    }\n\n    this.board[row] = compressedRow;\n\n    for (let col = 0; col < GRID_SIZE; col++) {\n      this.animateMove(row, col);\n    }\n\n    return changed;\n  }\n\n  animateNewTile(row, col) {\n    const cell = document.querySelector(\n      `.field-cell[data-row=\"${row}\"][data-col=\"${col}\"]`,\n    );\n\n    if (cell) {\n      cell.classList.add('field-cell--new');\n\n      setTimeout(() => {\n        cell.classList.remove('field-cell--new');\n      }, 300);\n    }\n  }\n\n  animateAppear(row, col) {\n    const cell = document.querySelector(\n      `.field-cell[data-row=\"${row}\"][data-col=\"${col}\"]`,\n    );\n\n    if (cell) {\n      cell.classList.add('field-cell--appear');\n\n      setTimeout(() => {\n        cell.classList.remove('field-cell--appear');\n      }, 200);\n    }\n  }\n\n  animateMerge(row, col) {\n    const cell = document.querySelector(\n      `.field-cell[data-row=\"${row}\"][data-col=\"${col}\"]`,\n    );\n\n    if (cell) {\n      cell.classList.add('field-cell--merge');\n\n      setTimeout(() => {\n        cell.classList.remove('field-cell--merge');\n      }, 300);\n    }\n  }\n\n  animateMove(row, col) {\n    const cell = document.querySelector(\n      `.field-cell[data-row=\"${row}\"][data-col=\"${col}\"]`,\n    );\n\n    if (cell) {\n      cell.classList.add('field-cell--move');\n\n      setTimeout(() => {\n        cell.classList.remove('field-cell--move');\n      }, 300);\n    }\n  }\n}\n","function _class_call_check(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\nexport { _class_call_check as _ };\n","function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n\n        if (\"value\" in descriptor) descriptor.writable = true;\n\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _create_class(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n\n    return Constructor;\n}\nexport { _create_class as _ };\n","import { _ as _array_without_holes } from \"./_array_without_holes.js\";\nimport { _ as _iterable_to_array } from \"./_iterable_to_array.js\";\nimport { _ as _non_iterable_spread } from \"./_non_iterable_spread.js\";\nimport { _ as _unsupported_iterable_to_array } from \"./_unsupported_iterable_to_array.js\";\n\nfunction _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nexport { _to_consumable_array as _ };\n","import { _ as _array_like_to_array } from \"./_array_like_to_array.js\";\n\nfunction _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nexport { _array_without_holes as _ };\n","function _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n\n    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n    return arr2;\n}\nexport { _array_like_to_array as _ };\n","function _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) {\n        return Array.from(iter);\n    }\n}\nexport { _iterable_to_array as _ };\n","function _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nexport { _non_iterable_spread as _ };\n","import { _ as _array_like_to_array } from \"./_array_like_to_array.js\";\n\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nexport { _unsupported_iterable_to_array as _ };\n"],"names":["$c3b10a83b523f372$export$71511d61b312f219","arr","len","length","i","arr2","Array","$3d28d7f1aac198f5$export$2e2bcd8739ae039","protoProps","Game","instance","Constructor","TypeError","board","getState","score","gameActive","cells","document","querySelectorAll","messageWin","querySelector","messageLose","assignDataAttributes","key","value","forEach","cell","index","row","Math","floor","dataset","col","changed","moveColumnUp","getRandomTile","addCell","checkGameStatus","moveColumnDown","moveColumnLeft","moveColumnRight","flat","reduce","acc","isArray","iter","Symbol","iterator","from","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","test","map","fill","emptyTiles","push","_emptyTiles_Math_floor","random","row1","col1","animateNewTile","includes","checkCol","$3d28d7f1aac198f5$var$GRID_SIZE","checkRow","checkWin","checkLose","gameStatus","getStatus","classList","remove","_this","className","concat","textContent","animateAppear","element","replace","setTimeout","hasHiddenLose","contains","hasHiddenWin","add","deleteCell","compressedColumn","filter","splice","animateMerge","animateMove","unshift","compressedRow","some","$4fc75ccb937ab1df$var$_defineProperties","target","props","descriptor","enumerable","configurable","writable","defineProperty","addEventListener","game","gameStart","messageStart","setUpInputOnce","window","handleInput","once","setUpScore","getScore","event","moveUp","moveDown","moveLeft","moveRight","start","confirm","restart"],"version":3,"file":"index.61c2c5d8.js.map"}